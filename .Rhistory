iris
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(iris)
head(iris)
head(iris)
source('~/script.R')
source('~/script.R')
source('~/script.R')
source('~/script.R')
source('~/script.R')
head(iris)
source('~/script.R')
source('~/script.R')
head(iris)
head(iris)
iris
head(iris)
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
iris
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
head(iris)
library(ggvis)
install.packages("ggvis")
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
x=levels(iris$Species)
print(x[1])
cor(iris[iris$Species==x[1], 1:4])
print(x[2])
cor(iris[iris$Species==x[2], 1:4])
cor(iris[iris$Species==x[1], 1:4])
print(x[2])
cor(iris[iris$Species==x[2], 1:4])
print(x[3])
cor(iris[iris$Species==x[3], 1:4])
cor(iris[iris$Species==x[1], 1:4])
cor(iris[iris$Species==x[2], 1:4])
cor(iris[iris$Species==x[3], 1:4])
cor(iris$Petal.Length, iris$Petal.Width)
iris
head(iris)
string (iris)
str (iris)
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(....)
summary(iris)
summary(iris[c("Petal.Width", "Sepal.Width")])
library(class)
normalize <- function(x) {
num <- x-min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67,0.33))
iris.training <- iris[ind==1, 1:4]
head(iris.training)
iris.test <- iris[ind==2, 1:4]
head(iris.test)
head(iris.test)
iris.trainLabels <- iris[ind==1,5]
iris.trainLabels <- iris[ind==1,5]
print(iris.trainLabels)
iris.testLabels <- iris[ind=2,5]
print(iris.testLabels)
iris.testLabels <- iris[ind==2,5]
print(iris.testLabels)
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
print(iris_pred)
iris_pred
iristestLabels <- data.frame(iris.testLabels)
merge <- data.frame(iris_pred, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
library(gmodels)
install.packages("gmodels")
CrossTable(x=iris.testLabels, y=iris_pred, prop.chisq=FALSE)
library(gmodels)
CrossTable(x=iris.testLabels, y=iris_pred, prop.chisq=FALSE)
library(caret)
install.packages("caret")
library(caret)
index <- createDataPartition(iris$Species, p=0.75, list=FALSE)
iris.training <- iris[index,]
iris.test <- iris[-index,]
names(getModelInfo())
model_knn <- train(iris.training[, 1:4], iris.training[,5], method='knn')
iris.training[, 1:4]
iris.training[, 5]
train(iris.training[, 1:4], iris.training[,5], method='knn')
install.packages("e1071")
train(iris.training[, 1:4], iris.training[,5], method='knn')
model_knn <- train(iris.training[, 1:4], iris.training[,5], method='knn')
model_knn
model_cart <- train(iris.training[, 1:4], iris.training[,5], method='rpart2')
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
model_cart <- train(iris.training[, 1:4], iris.training[,5], method='rpart2')
library(caret)
model_cart <- train(iris.training[, 1:4], iris.training[,5], method='rpart2')
model_knn
model_cart
library(gmodels)
model_cart <- train(iris.training[, 1:4], iris.training[,5], method='rpart2')
a <- c(1,2,3,4,5)
view(a)
iew(a)
View(a)
b = <- c (1,2,3,list(1,2,3),4,5)
b = <- c(1,2,3,list(1,2,3),4,5)
b <- c(1,2,3,list(1,2,3),4,5)
View B
View(B)
View(b)
d <- c(1,2,3,list(1,2,3),4,5, recursive=TRUE)
View(d)
a
b
c
d
a[1]
a[4]
b[3]
c[3]
d[3]
b
b[1]
b[1,1]
b[1][1]
b[[1]]
e <- list(1,2,3)
e
f <- list(list(1,2,3),list(4,5,6),list(7,8,9))
f
view(f)
View(f)
f[1]
f[1,1]
f[1][2]
f[[1]][2]
f[[1]][1]
f[[1]]
f[[2]]
typeoff[[2]]
typeof[[2]]
typeof(f[[2]])
typeof(f[[2]][1])
typeof(f[[2]][[1])
typeof(f[[2]][[1]])
g <- list(c(1,2,3), c(4,5,6), c(7,8,9))
View(g)
g
g[1,2]
g[1]
g[1][2]
g[[1][2]
g[[1]][2]
g[[1]]
g[1]
View(g[1])
View(g[[1])
View(g[[1])
View(g[[1]])
a
v123 <- c(1,2,3)
v456 <- c(4,5,6)
v789 <- c(7,8,9)
v123
v234
v456
v456
v1 <- v123
v2 <- v234
v2 <- v456
v1
v2
v3 <- c(7,8,9)
l1 <- list(1,2,3)
l2 <- list(4,5,6)
l3 <- list(7,8,9)
l1
v_of_v <- c(v1,v2,v3)
v_of_v
v_of_l <- c(l1,l2,l3)
v_of_l
l_of_v <- list(v1,v2,v3)
l_of_v
l_of_l <- list(l1,l2,l3)
l_of_l
View(l_of_l)
l_of_l[1]
l_of_l[[1]]
l_of_l[[1]][1]
l_of_l[[1]][[1]]
l_of_l[1]
l_of_l
l_of_l[x1]
l_of_l[X1]
l_of_l:X1
l_of_l$X1
v_of_l
v_of_l_recursive <- c(l1,l2,l3,recursive=TRUE)
v_of_l_recursive
v_of_l_recursive_f <- c(l1,l2,l3,recursive=FALSE)
v_of_l_recursive_f
length(v1)
length(l1)
c(1:10)
c("ho")
c("ho")+c(1:10)
c("ho")
rep(365,"ho")
rep("ho",365)
rep("eve",365)
a = rep("ho",365)
b = "christmas"
paste(b,a)
a = rep("eve",365)
cbind(b,a)
c(b,a)
c("christmas", rep("eve",365))
as.Date("2017-12-31")
as.Date("2017-12-31") - 5
as.Date("2017-12-31") - as.Date("2017-12-25")
c = as.Date("2017-12-31") - as.Date("2017-12-25")
c
typeof(c)
class(c)
c = as.Date("2017-12-31") - Sys.time()
c = as.Date("2017-12-31") - Sys.Date()
c
as.numeric(c, units = "days")
as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days")
ny = as.Date("2017-12-31")
diffdate = ny - Sys.Date()
days = as.numeric(diffdate, units = "days")
eves = rep("eve", days)
c("new years", eves)
c("new years", rep("eve", as.numeric(as.date("2017-12-31") - Sys.Date(), units="days")))
c("new years", rep("eve", as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days")))
paste(c("new years", rep("eve", as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days"))))
paste(c("new years", rep("eve", as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days"))),"")
paste(c("new years", rep("eve", as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days"))),collapse="")
paste(c("new years", rep("eve", as.numeric(as.Date("2017-12-31") - Sys.Date(), units="days"))),collapse=" ")
paste(c("toriday", rep("eve", as.numeric(as.Date("2018-05-26") - Sys.Date(), units="days"))),collapse=" ")
install.packages("rgdal")
install.packages("tidyverse")
install.packages("dslabs")
library("dslabs")
data(package="dslabs")
Titanic
View(Titanic)
View(USAccDeaths)
View(ChickWeight)
View(AirPassengers)
data("divorce_margarine")
divorce_margarine
data("us_contagious_diseases")
us_contagious_diseases
data("us_contagious_diseases")
View(us_contagious_diseases)
write.csv(us_contagious_diseases, "us_contagious_diseases.csv")
us_contagious_diseases %>% head
us_contagious_diseases %>% head()
library(magrittr)
us_contagious_diseases %>% head()
head(us_contagious_diseases)
library(dplyr)
select(us_contagious_diseases, disease, state, year, count)
head(select(us_contagious_diseases, disease, state, year, count))
us_contagious_diseases %>% select(disease, state, year, count) %>% head
us_contagious_diseases %>% select(disease, state, year, count)
head(us_contagious_diseases %>% select(disease, state, year, count))
install.packages("pdftools")
head(us_contagious_diseases %>% select(disease, state, year, count))
library("RColorBrewer", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(tidyverse)
library(lubridate)
options(scipen=999)
setwd("/Users/bentrevino/Dropbox/Big\ Data\ Analyst\ -\ Dev\ League/repos/RetroSpeckt/")
train <- read_csv("train.csv")
test <- read_csv("test.csv")
full <- bind_rows(train, test)
full$date <- mdy(full$date)
full$dayofweek <- weekdays(full$date)
full$week  <- week(full$date)
full$month <- month(full$date)
full$year  <- year(full$date)
full$time <- as.numeric(full$time)
shouldBeCategorical <- c('country','dayofweek')
for(v in shouldBeCategorical) {full[[v]] <- as.factor(full[[v]])}
full$quantity <- log1p(full$quantity)
train <- full[1:nrow(train),-(1:2)]
test <- full[-(1:nrow(train)),-(1:2)]
library(h2o)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
train <- as.h2o(train)
train <- as.h2o(train)
aml <- h2o.automl(y = "quantity",
training_frame = train,
stopping_metric = "RMSE",  # tried using RMSLE but h2o's metrics weren't good
max_runtime_secs = 3600)  # 1 hour
lb <- aml@leaderboard
lb
aml@leader
test <- as.h2o(test)
pred <- h2o.predict(aml@leader, test)
write.csv(subm, "h2o_autoML.csv", row.names=FALSE)
subm <- read_csv("submission.csv")
subm$quantity <- as.vector(expm1(pred))
write.csv(subm, "h2o_autoML.csv", row.names=FALSE)
